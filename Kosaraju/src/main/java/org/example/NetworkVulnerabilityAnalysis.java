package org.example;

import java.util.*;

public class NetworkVulnerabilityAnalysis {
    private int vertices;
    private List<List<Integer>> adjacencyList;
    private List<List<Integer>> transposeGraph;

    public NetworkVulnerabilityAnalysis(int vertices) {
        this.vertices = vertices;
        adjacencyList = new ArrayList<>(vertices);
        transposeGraph = new ArrayList<>(vertices);

        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new ArrayList<>());
            transposeGraph.add(new ArrayList<>());
        }
    }

    // Add edge to the network graph
    public void addEdge(int source, int destination) {
        adjacencyList.get(source).add(destination);
        // Add edge to transpose graph
        transposeGraph.get(destination).add(source);
    }

    // First DFS to fill the stack
    private void fillOrder(int vertex, boolean[] visited, Stack<Integer> stack) {
        visited[vertex] = true;

        for (int adjacent : adjacencyList.get(vertex)) {
            if (!visited[adjacent]) {
                fillOrder(adjacent, visited, stack);
            }
        }
        stack.push(vertex);
    }

    // Second DFS to find strongly connected components
    private List<Integer> DFSUtil(int vertex, boolean[] visited) {
        List<Integer> component = new ArrayList<>();
        visited[vertex] = true;
        component.add(vertex);

        for (int adjacent : transposeGraph.get(vertex)) {
            if (!visited[adjacent]) {
                component.addAll(DFSUtil(adjacent, visited));
            }
        }
        return component;
    }

    // Find strongly connected components using Kosaraju's algorithm
    public List<List<Integer>> findStronglyConnectedComponents() {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[vertices];

        // First DFS to fill stack
        for (int i = 0; i < vertices; i++) {
            if (!visited[i]) {
                fillOrder(i, visited, stack);
            }
        }

        // Reset visited array
        Arrays.fill(visited, false);
        List<List<Integer>> stronglyConnectedComponents = new ArrayList<>();

        // Process vertices in stack order
        while (!stack.empty()) {
            int vertex = stack.pop();
            if (!visited[vertex]) {
                List<Integer> component = DFSUtil(vertex, visited);
                stronglyConnectedComponents.add(component);
            }
        }

        return stronglyConnectedComponents;
    }

    // Analyze network vulnerabilities
    public Map<Integer, Double> analyzeVulnerabilities() {
        List<List<Integer>> components = findStronglyConnectedComponents();
        Map<Integer, Double> vulnerabilityScores = new HashMap<>();

        // Calculate vulnerability scores based on component size and connectivity
        for (int i = 0; i < vertices; i++) {
            double score = calculateVulnerabilityScore(i, components);
            vulnerabilityScores.put(i, score);
        }

        return vulnerabilityScores;
    }

    private double calculateVulnerabilityScore(int vertex, List<List<Integer>> components) {
        double score = 0.0;

        // Factor 1: Component size
        for (List<Integer> component : components) {
            if (component.contains(vertex)) {
                score += 1.0 / component.size(); // Smaller components are more vulnerable
                break;
            }
        }

        // Factor 2: Degree centrality
        score += (double) (adjacencyList.get(vertex).size() + transposeGraph.get(vertex).size())
                / (2 * vertices);

        return score;
    }

    public static void main(String[] args) {
        // Simulate a network with 8 nodes
        NetworkVulnerabilityAnalysis network = new NetworkVulnerabilityAnalysis(5);

        // Add edges to simulate network connections
        network.addEdge(0, 1);
        network.addEdge(1, 2);
        network.addEdge(2, 0);
        network.addEdge(2, 3);// To make a cycle, connect 2 -> 0
        network.addEdge(3, 4);
        network.addEdge(4, 3);

        // Find strongly connected components
        List<List<Integer>> components = network.findStronglyConnectedComponents();
        System.out.println("Strongly Connected Components in the network:");
        for (List<Integer> component : components) {
            System.out.println(component);
        }

        // Analyze vulnerabilities
        Map<Integer, Double> vulnerabilities = network.analyzeVulnerabilities();
        System.out.println("\nVulnerability Scores for each node:");
        vulnerabilities.entrySet().stream()
                .sorted(Map.Entry.<Integer, Double>comparingByValue().reversed())
                .forEach(entry -> System.out.printf("Node %d: %.3f\n", entry.getKey(), entry.getValue()));
    }
}