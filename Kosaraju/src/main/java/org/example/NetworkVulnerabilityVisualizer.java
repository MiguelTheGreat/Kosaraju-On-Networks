package org.example;

import javax.swing.*;
import javax.swing.Timer;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;

public class NetworkVulnerabilityVisualizer extends JFrame {
    private List<Node> nodes;
    private List<Edge> edges;
    private List<List<Integer>> components;
    private Map<Integer, Double> vulnerabilityScores;
    private Timer animationTimer;
    private int currentStep;
    private boolean isAnalyzing;
    private NetworkPanel networkPanel;
    private JButton analyzeButton;
    private JTextArea infoArea;

    private static final int WIDTH = 1200;
    private static final int HEIGHT = 800;
    private static final int NODE_RADIUS = 20;

    public NetworkVulnerabilityVisualizer() {
        setTitle("Network Vulnerability Analyzer");
        setSize(WIDTH, HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        nodes = new ArrayList<>();
        edges = new ArrayList<>();
        setupUI();
        createSampleNetwork();

        currentStep = 0;
        isAnalyzing = false;
    }

    private void setupUI() {
        setLayout(new BorderLayout());

        // Create main network visualization panel
        networkPanel = new NetworkPanel();
        add(networkPanel, BorderLayout.CENTER);

        // Create control panel
        JPanel controlPanel = new JPanel();
        analyzeButton = new JButton("Analyze Vulnerabilities");
        analyzeButton.addActionListener(e -> startAnalysis());
        controlPanel.add(analyzeButton);

        // Create info panel
        infoArea = new JTextArea(5, 40);
        infoArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(infoArea);

        // Add panels to frame
        add(controlPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.SOUTH);
    }

    private void createSampleNetwork() {
        // Create nodes in a circular layout
        int numNodes = 5;  // Set to 5 nodes
        for (int i = 0; i < numNodes; i++) {
            double angle = 2 * Math.PI * i / numNodes;
            int x = (int) (WIDTH/2 + 200 * Math.cos(angle));
            int y = (int) (HEIGHT/2 + 200 * Math.sin(angle));
            nodes.add(new Node(i, x, y));  // Add the node at the calculated (x, y) position
        }

        addEdge(0, 1);
        addEdge(1, 2);
        addEdge(2, 0);
        addEdge(2, 3);
        addEdge(3, 4);
        addEdge(4, 3);
    }

    private void addEdge(int source, int dest) {
        edges.add(new Edge(nodes.get(source), nodes.get(dest)));
    }

    private void startAnalysis() {
        if (!isAnalyzing) {
            isAnalyzing = true;
            currentStep = 0;
            analyzeButton.setEnabled(false);

            animationTimer = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    performAnalysisStep();
                }
            });
            animationTimer.start();

            // Create network analyzer
            NetworkVulnerabilityAnalysis analyzer = new NetworkVulnerabilityAnalysis(nodes.size());
            for (Edge edge : edges) {
                analyzer.addEdge(edge.source.id, edge.dest.id);
            }

            components = analyzer.findStronglyConnectedComponents();
            vulnerabilityScores = analyzer.analyzeVulnerabilities();
        }
    }

    private void performAnalysisStep() {
        if (currentStep < components.size()) {
            // Highlight current component
            List<Integer> currentComponent = components.get(currentStep);
            for (Node node : nodes) {
                node.highlighted = currentComponent.contains(node.id);
                if (node.highlighted) {
                    node.color = new Color(255, 165, 0); // Orange
                }
            }

            infoArea.append("Component " + (currentStep + 1) + ": " + currentComponent + "\n");
            currentStep++;
        } else if (currentStep == components.size()) {
            // Show vulnerability scores
            for (Node node : nodes) {
                double score = vulnerabilityScores.get(node.id);
                node.vulnerabilityScore = score;
                node.color = getColorForScore(score);
            }

            infoArea.append("\nVulnerability Scores:\n");
            vulnerabilityScores.entrySet().stream()
                    .sorted(Map.Entry.<Integer, Double>comparingByValue().reversed())
                    .forEach(entry -> infoArea.append(String.format("Node %d: %.3f\n",
                            entry.getKey(), entry.getValue())));

            currentStep++;
        } else {
            animationTimer.stop();
            isAnalyzing = false;
            analyzeButton.setEnabled(true);
        }

        networkPanel.repaint();
    }

    private Color getColorForScore(double score) {
        // Color gradient from green (low vulnerability) to red (high vulnerability)
        float hue = (float) (0.33 - score * 0.33);
        return Color.getHSBColor(hue, 0.9f, 0.9f);
    }

    private class NetworkPanel extends JPanel {
        public NetworkPanel() {
            setBackground(Color.WHITE);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);

            // Draw edges
            g2d.setStroke(new BasicStroke(2));
            for (Edge edge : edges) {
                g2d.setColor(Color.GRAY);
                g2d.drawLine(edge.source.x, edge.source.y, edge.dest.x, edge.dest.y);

                // Draw arrow
                drawArrow(g2d, edge.source.x, edge.source.y,
                        edge.dest.x, edge.dest.y);
            }

            // Draw nodes
            for (Node node : nodes) {
                g2d.setColor(node.color);
                g2d.fillOval(node.x - NODE_RADIUS, node.y - NODE_RADIUS,
                        NODE_RADIUS * 2, NODE_RADIUS * 2);
                g2d.setColor(Color.BLACK);
                g2d.drawOval(node.x - NODE_RADIUS, node.y - NODE_RADIUS,
                        NODE_RADIUS * 2, NODE_RADIUS * 2);

                // Draw node ID
                String label = String.valueOf(node.id);
                if (node.vulnerabilityScore >= 0) {
                    label += String.format(" (%.2f)", node.vulnerabilityScore);
                }
                g2d.drawString(label, node.x - 10, node.y + 5);
            }
        }

        private void drawArrow(Graphics2D g2d, int x1, int y1, int x2, int y2) {
            double dx = x2 - x1;
            double dy = y2 - y1;
            double angle = Math.atan2(dy, dx);
            int arrowLength = 20;
            int arrowWidth = 8;

            // Calculate arrow endpoint considering node radius
            double length = Math.sqrt(dx * dx + dy * dy);
            double scale = (length - NODE_RADIUS) / length;
            int endX = (int) (x1 + dx * scale);
            int endY = (int) (y1 + dy * scale);

            // Draw arrow head
            int[] xPoints = new int[3];
            int[] yPoints = new int[3];
            xPoints[0] = endX;
            yPoints[0] = endY;
            xPoints[1] = (int) (endX - arrowLength * Math.cos(angle - Math.PI/6));
            yPoints[1] = (int) (endY - arrowLength * Math.sin(angle - Math.PI/6));
            xPoints[2] = (int) (endX - arrowLength * Math.cos(angle + Math.PI/6));
            yPoints[2] = (int) (endY - arrowLength * Math.sin(angle + Math.PI/6));

            g2d.fillPolygon(xPoints, yPoints, 3);
        }
    }

    private static class Node {
        int id;
        int x, y;
        Color color;
        boolean highlighted;
        double vulnerabilityScore;

        Node(int id, int x, int y) {
            this.id = id;
            this.x = x;
            this.y = y;
            this.color = Color.LIGHT_GRAY;
            this.highlighted = false;
            this.vulnerabilityScore = -1;
        }
    }

    private static class Edge {
        Node source;
        Node dest;

        Edge(Node source, Node dest) {
            this.source = source;
            this.dest = dest;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            NetworkVulnerabilityVisualizer visualizer = new NetworkVulnerabilityVisualizer();
            visualizer.setVisible(true);
        });
    }
}